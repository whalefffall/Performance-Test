#!./perl

# This is written in a peculiar style, since we're trying to avoid
# most of the constructs we'll be testing for.  (This comment is
# probably obsolete on the avoidance side, though still current
# on the peculiarity side.)

# t/TEST and t/harness need to share code. The logical way to do this would be
# to have the common code in a file both require or use. However, t/TEST needs
# to still work, to generate test results, even if require isn't working, so
# we cannot do that. t/harness has no such restriction, so it is quite
# acceptable to have it require t/TEST.

# In which case, we need to stop t/TEST actually running tests, as all
# t/harness needs are its subroutines.

# Measure the elapsed wallclock time.
my $t0 = time();

# If we're doing deparse tests, ignore failures for these
my $deparse_failures;

# And skip even running these
my $deparse_skips;

# directories with special sets of test switches
my %dir_to_switch =
    (base => '',
     comp => '',
     run => '',
     '../ext/File-Glob/t' => '-I.. -MTestInit', # FIXME - tests assume t/
     );

# "not absolute" is the default, as it saves some fakery within TestInit
# which can perturb tests, and takes CPU. Working with the upstream author of
# any of these, to figure out how to remove them from this list, considered
# "a good thing".
my %abs = (
	   '../cpan/Archive-Tar' => 1,
	   '../cpan/AutoLoader' => 1,
	   '../cpan/CPAN' => 1,
	   '../cpan/Devel-PPPort' => 1,
	   '../cpan/Encode' => 1,
	   '../cpan/ExtUtils-Command' => 1,
	   '../cpan/ExtUtils-Constant' => 1,
	   '../cpan/ExtUtils-Install' => 1,
	   '../cpan/ExtUtils-MakeMaker' => 1,
	   '../cpan/ExtUtils-Manifest' => 1,
	   '../cpan/File-Fetch' => 1,
	   '../cpan/IPC-Cmd' => 1,
	   '../cpan/IPC-SysV' => 1,
	   '../cpan/Locale-Codes' => 1,
	   '../cpan/Module-Load' => 1,
	   '../cpan/Module-Load-Conditional' => 1,
	   '../cpan/Parse-CPAN-Meta' => 1,
	   '../cpan/Pod-Simple' => 1,
	   '../cpan/Test-Simple' => 1,
	   '../cpan/podlators' => 1,
	   '../dist/Cwd' => 1,
	   '../dist/ExtUtils-ParseXS' => 1,
	   '../dist/Tie-File' => 1,
	  );

my %temp_no_core =
    ('../cpan/B-Debug' => 1,
     '../cpan/Compress-Raw-Bzip2' => 1,
     '../cpan/Compress-Raw-Zlib' => 1,
     '../cpan/Devel-PPPort' => 1,
     '../cpan/Getopt-Long' => 1,
     '../cpan/IO-Compress' => 1,
     '../cpan/MIME-Base64' => 1,
     '../cpan/parent' => 1,
     '../cpan/Parse-CPAN-Meta' => 1,
     '../cpan/Pod-Simple' => 1,
     '../cpan/podlators' => 1,
     '../cpan/Test-Simple' => 1,
     '../cpan/Tie-RefHash' => 1,
     '../cpan/Unicode-Collate' => 1,
     '../cpan/Unicode-Normalize' => 1,
    );

# delete env vars that may influence the results
# but allow override via *_TEST env var if wanted
# (e.g. PERL5OPT_TEST=-d:NYTProf)
my @bad_env_vars = qw(
    PERL5LIB PERLLIB PERL5OPT
    PERL_YAML_BACKEND PERL_JSON_BACKEND
);

for my $envname (@bad_env_vars) {
    my $override = $ENV{"${envname}_TEST"};
    if (0 && defined $override) { # SPEC CPU; no overrides
	warn "$0: $envname=$override\n";
	$ENV{$envname} = $override;
    }
    else {
	delete $ENV{$envname};
    }
}

# Location to put the Valgrind log.
our $Valgrind_Log;

my %skip = (
	    '.' => 1,
	    '..' => 1,
	    'CVS' => 1,
	    'RCS' => 1,
	    'SCCS' => 1,
	    '.svn' => 1,
	   );


if ($::do_nothing) {
    return 1;
}

$| = 1;

# for testing TEST only
#BEGIN { require '../lib/strict.pm'; "strict"->import() };
#BEGIN { require '../lib/warnings.pm'; "warnings"->import() };

# remove empty elements due to insertion of empty symbols via "''p1'" syntax
@ARGV = grep($_,@ARGV) if $^O eq 'VMS';

# String eval to avoid loading File::Glob on non-miniperl.
# (Windows only uses this script for miniperl.)
@ARGV = eval 'map glob, @ARGV' if $^O eq 'MSWin32';

our $show_elapsed_time = 0; # SPEC CPU: was $ENV{HARNESS_TIMER} || 0;

# Cheesy version of Getopt::Std.  We can't replace it with that, because we
# can't rely on require working.
{
    my @argv = ();
    foreach my $idx (0..$#ARGV) {
	push( @argv, $ARGV[$idx] ), next unless $ARGV[$idx] =~ /^-(\S+)$/;
	$::benchmark = 1 if $1 eq 'benchmark';
	$::core    = 1 if $1 eq 'core';
	$::verbose = 1 if $1 eq 'v';
	$::torture = 1 if $1 eq 'torture';
	$::with_utf8 = 1 if $1 eq 'utf8';
	$::with_utf16 = 1 if $1 eq 'utf16';
	$::taintwarn = 1 if $1 eq 'taintwarn';
	if ($1 =~ /^deparse(,.+)?$/) {
	    $::deparse = 1;
	    $::deparse_opts = $1;
            _process_deparse_config();
	}
    }
    @ARGV = @argv;
}

chdir 't' if -f 't/TEST';
if (-f 'TEST' && -f 'harness' && -d '../lib') {
    @INC = '../lib';
}

if (1) { # SPEC CPU
    @INC = '../lib';
    # No directory reading functions, so just hard-code the test list here
    push @ARGV, (qw(
base/cond.t
base/if.t
base/lex.t
base/num.t
base/pat.t
base/rs.t
base/term.t
base/while.t
cmd/elsif.t
cmd/for.t
cmd/mod.t
cmd/subval.t
cmd/switch.t
comp/bproto.t
comp/cmdopt.t
comp/colon.t
comp/decl.t
comp/final_line_num.t
comp/fold.t
comp/form_scope.t
comp/hints.t
comp/line_debug.t
comp/multiline.t
comp/opsubs.t
comp/our.t
comp/package.t
comp/package_block.t
comp/parser.t
comp/proto.t
comp/redef.t
comp/require.t
comp/retainedlines.t
comp/term.t
comp/uproto.t
comp/use.t
ext/Hash-Util-FieldHash/t/01_load.t
ext/Hash-Util-FieldHash/t/02_function.t
ext/Hash-Util-FieldHash/t/03_class.t
ext/Hash-Util-FieldHash/t/05_perlhook.t
ext/Hash-Util-FieldHash/t/11_hashassign.t
ext/Hash-Util-FieldHash/t/12_hashwarn.t
ext/Hash-Util/t/Util.t
ext/PerlIO-scalar/t/scalar.t
ext/PerlIO-scalar/t/scalar_ungetc.t
ext/PerlIO-via/t/via.t
io/argv.t
io/binmode.t
io/crlf.t
io/crlf_through.t
io/defout.t
io/dup.t
io/nargv.t
io/open.t
io/perlio.t
io/perlio_fail.t
io/perlio_leaks.t
io/print.t
io/pvbm.t
io/read.t
io/say.t
io/tell.t
io/through.t
japh/abigail.t
lib/deprecate.t
lib/mypragma.t
lib/overload_fallback.t
lib/overload_nomethod.t
lib/universal.t
op/append.t
op/args.t
op/array.t
op/array_base.t
op/assignwarn.t
op/attrhand.t
op/attrproto.t
op/attrs.t
op/auto.t
op/avhv.t
op/bless.t
op/bop.t
op/caller.t
op/chars.t
op/chop.t
op/chr.t
op/closure.t
op/concat2.t
op/cond.t
op/context.t
op/coreamp.t
op/cproto.t
op/current_sub.t
op/defined.t
op/defins.t
op/delete.t
op/die.t
op/die_except.t
op/die_keeperr.t
op/die_unwind.t
op/do.t
op/dor.t
op/each.t
op/each_array.t
op/eval.t
op/evalbytes.t
op/exists_sub.t
op/exp.t
op/fh.t
op/filehandle.t
op/filetest.t
op/filetest_stack_ok.t
op/filetest_t.t
op/for.t
op/gmagic.t
op/goto.t
op/goto_xs.t
op/grep.t
op/gv.t
op/hash.t
op/hashassign.t
op/hashwarn.t
op/inc.t
op/inccode-tie.t
op/inccode.t
op/index.t
op/int.t
op/join.t
op/kvaslice.t
op/kvhslice.t
op/lc.t
op/leaky-magic.t
op/length.t
op/lex.t
op/lex_assign.t
op/lexsub.t
op/list.t
op/local.t
op/localref.t
op/lock.t
op/loopctl.t
op/lop.t
op/magic-27839.t
op/method.t
op/mkdir.t
op/my.t
op/my_stash.t
op/mydef.t
op/negate.t
op/not.t
op/numconvert.t
op/oct.t
op/or.t
op/ord.t
op/overload_integer.t
op/override.t
op/pack.t
op/packagev.t
op/pos.t
op/postfixderef.t
op/pow.t
op/protowarn.t
op/push.t
op/qr.t
op/quotemeta.t
op/rand.t
op/range.t
op/read.t
op/readline.t
op/recurse.t
op/ref.t
op/repeat.t
op/require_37033.t
op/require_errors.t
op/reset.t
op/reverse.t
op/rt119311.t
op/select.t
op/signatures.t
op/sleep.t
op/smartkve.t
op/smartmatch.t
op/sort.t
op/splice.t
op/split.t
op/sprintf.t
op/sprintf2.t
op/srand.t
op/sselect.t
op/stash.t
op/stat.t
op/state.t
op/study.t
op/studytied.t
op/sub.t
op/sub_lval.t
op/substr.t
op/switch.t
op/symbolcache.t
op/tie_fetch_count.t
op/tiearray.t
op/tiehandle.t
op/time.t
op/tr.t
op/undef.t
op/universal.t
op/unlink.t
op/unshift.t
op/upgrade.t
op/vec.t
op/ver.t
op/wantarray.t
op/warn.t
op/while.t
op/write.t
op/yadayada.t
opbasic/arith.t
opbasic/cmp.t
opbasic/concat.t
opbasic/magic_phase.t
opbasic/qq.t
perf/benchmarks.t
perf/speed.t
perf/taint.t
porting/corelist.t
re/overload.t
re/pat.t
re/pat_psycho.t
re/pat_re_eval.t
re/pat_rt_report.t
re/pat_special_cc.t
re/pos.t
re/qr-72922.t
re/qr.t
re/qr_gc.t
re/qrstack.t
re/reg_email.t
re/reg_eval_scope.t
re/reg_mesg.t
re/reg_pmod.t
re/reg_posixcc.t
re/regex_sets.t
re/regex_sets_compat.t
re/regexp.t
re/regexp_noamp.t
re/regexp_notrie.t
re/regexp_qr.t
re/regexp_qr_embed.t
re/regexp_trielist.t
re/rxcode.t
re/subst.t
re/substT.t
re/subst_amp.t
re/subst_wamp.t
run/noswitch.t
run/switch0.t
run/switchF.t
run/switcha.t
run/switchn.t
run/switchp.t
test_pl/_num_to_alpha.t
test_pl/can_isa_ok.t
test_pl/tempfile.t
uni/attrs.t
uni/bless.t
uni/cache.t
uni/caller.t
uni/class.t
uni/eval.t
uni/goto.t
uni/gv.t
uni/labels.t
uni/method.t
uni/opcroak.t
uni/overload.t
uni/package.t
uni/parser.t
uni/readline.t
uni/select.t
uni/sprintf.t
uni/stash.t
uni/tie.t
uni/universal.t
uni/variables.t
uni/write.t
cpan/Digest/t/base.t
cpan/Digest/t/digest.t
cpan/Digest/t/file.t
cpan/Digest/t/security.t
cpan/Digest-MD5/t/align.t
cpan/Digest-MD5/t/badfile.t
cpan/Digest-MD5/t/bits.t
cpan/Digest-MD5/t/clone.t
cpan/Digest-MD5/t/files.t
cpan/Digest-MD5/t/md5-aaa.t
cpan/Digest-MD5/t/utf8.t
cpan/Digest-SHA/t/allfcns.t
cpan/Digest-SHA/t/base64.t
cpan/Digest-SHA/t/bitbuf.t
cpan/Digest-SHA/t/bitorder.t
cpan/Digest-SHA/t/fips180-4.t
cpan/Digest-SHA/t/fips198.t
cpan/Digest-SHA/t/gg.t
cpan/Digest-SHA/t/gglong.t
cpan/Digest-SHA/t/hmacsha.t
cpan/Digest-SHA/t/inheritance.t
cpan/Digest-SHA/t/ireland.t
cpan/Digest-SHA/t/nistbit.t
cpan/Digest-SHA/t/nistbyte.t
cpan/Digest-SHA/t/rfc2202.t
cpan/Digest-SHA/t/sha1.t
cpan/Digest-SHA/t/sha224.t
cpan/Digest-SHA/t/sha256.t
cpan/Digest-SHA/t/sha384.t
cpan/Digest-SHA/t/sha512.t
cpan/Digest-SHA/t/state.t
cpan/Digest-SHA/t/unicode.t
cpan/Digest-SHA/t/woodbury.t
    ));
} else {

die "You need to run \"make test\" first to set things up.\n"
  unless -e 'perl' or -e 'perl.exe' or -e 'perl.pm';

# check leakage for embedders
$ENV{PERL_DESTRUCT_LEVEL} = 2 unless exists $ENV{PERL_DESTRUCT_LEVEL};
# check existence of all symbols
$ENV{PERL_DL_NONLAZY} = 1 unless exists $ENV{PERL_DL_NONLAZY};

$ENV{EMXSHELL} = 'sh';        # For OS/2

if ($show_elapsed_time) { require Time::HiRes }
my %timings = (); # testname => [@et] pairs if $show_elapsed_time.

# Roll your own File::Find!
sub _find_tests { our @found=(); push @ARGV, _find_files('\.t$', $_[0]) }
sub _find_files {
    my($patt, @dirs) = @_;
    for my $dir (@dirs) {
	opendir DIR, $dir or die "Trouble opening $dir: $!";
	foreach my $f (sort { $a cmp $b } readdir DIR) {
	    next if $skip{$f};

	    my $fullpath = "$dir/$f";
	    
	    if (-d $fullpath) {
		_find_files($patt, $fullpath);
	    } elsif ($f =~ /$patt/) {
		push @found, $fullpath;
	    }
	}
    }
    @found;
}
} # SPEC CPU: End of block exclusion

# Scan the text of the test program to find switches and special options
# we might need to apply.
sub _scan_test {
    my($test, $type) = @_;

    open(my $script, "<", $test) or die "Can't read $test.\n";
    my $first_line = <$script>;

    $first_line =~ tr/\0//d if $::with_utf16;

    my $switch = "";
    if ($first_line =~ /#!.*\bperl.*\s-\w*([tT])/) {
        $switch = "-$1";
    } else {
        if ($::taintwarn) {
            # not all tests are expected to pass with this option
            $switch = '-t';
        } else {
            $switch = '';
        }
    }

    my $file_opts = "";
    if ($type eq 'deparse') {
        # Look for #line directives which change the filename
        while (<$script>) {
            $file_opts = $file_opts . ",-f$3$4"
              if /^#\s*line\s+(\d+)\s+((\w+)|"([^"]+)")/;
        }
    }

    close $script;

    my $perl = $^O eq 'MSWin32' ? '.\perl' : './perl';
    my $lib  = '../lib';
    my $run_dir;
    my $return_dir;

    $test =~ /^(.+)\/[^\/]+/;
    my $dir = $1;
    my $testswitch = $dir_to_switch{$dir};
    if (!defined $testswitch) {
	if ($test =~ s!^(\.\./(cpan|dist|ext)/[^/]+)/t!t!) {
	    $run_dir = $1;
	    $return_dir = '../../t';
	    $lib = '../../lib';
	    $perl = '../../t/perl';
	    $testswitch = "-I../.. -MTestInit=U2T";
	    if ($2 eq 'cpan' || $2 eq 'dist') {
		if($abs{$run_dir}) {
		    $testswitch = $testswitch . ',A';
		}
		if ($temp_no_core{$run_dir}) {
		    $testswitch = $testswitch . ',NC';
		}
	    }
	} elsif ($test =~ m!^\.\./lib!) {
	    $testswitch = '-I.. -MTestInit=U1'; # -T will remove . from @INC
	} else {
	    $testswitch = '-I.. -MTestInit';  # -T will remove . from @INC
	}
    }

    my $utf8 = ($::with_utf8 || $::with_utf16) ? "-I$lib -Mutf8" : '';

    my %options = (
	perl => $perl,
	lib => $lib,
	test => $test,
	run_dir => $run_dir,
	return_dir => $return_dir,
	testswitch => $testswitch,
	utf8 => $utf8,
	file => $file_opts,
	switch => $switch,
    );

    return \%options;
}

sub _cmd {
    my($options, $type) = @_;

    my $test = $options->{test};

    my $cmd;
    if ($type eq 'deparse') {
        my $perl = "$options->{perl} $options->{testswitch}";
        my $lib = $options->{lib};

        $cmd = (
          "$perl $options->{switch} -I$lib -MO=-qq,Deparse,-sv1.,".
          "-l$::deparse_opts$options->{file} ".
          "$test > $test.dp ".
          "&& $perl $options->{switch} -I$lib $test.dp"
        );
    }
    elsif ($type eq 'perl') {
        my $perl = '../'.$^X; # SPEC CPU; was $options->{perl};
        my $redir = $^O eq 'VMS' ? '2>&1' : '';

        if (0 && $ENV{PERL_VALGRIND}) { # SPEC CPU: No valgrind support
            my $perl_supp = $options->{return_dir} ? "$options->{return_dir}/perl.supp" : "perl.supp";
            my $valgrind_exe = $ENV{VALGRIND} // 'valgrind';
            if ($options->{run_dir}) {
                $Valgrind_Log = "$options->{run_dir}/$Valgrind_Log";
            }
            my $vg_opts = $ENV{VG_OPTS}
	       //   "--log-file=$Valgrind_Log "
		  . "--suppressions=$perl_supp --leak-check=yes "
		  . "--leak-resolution=high --show-reachable=yes "
		  . "--num-callers=50 --track-origins=yes";
	    # Force logging if not asked for (so cachegrind reporting works below)
	    if ($vg_opts !~ /--log-file/) {
		$vg_opts = "--log-file=$Valgrind_Log $vg_opts";
	    }
            $perl = "$valgrind_exe $vg_opts $perl";
        }

        my $args = "$options->{testswitch} $options->{switch} $options->{utf8}";
        $cmd = $perl . _quote_args($args) . " $test $redir";
    }
    return $cmd;
}

sub _before_fork {
    my ($options) = @_;

    if ($options->{run_dir}) {
	my $run_dir = $options->{run_dir};
	chdir $run_dir or die "Can't chdir to '$run_dir': $!";
    }

    # Remove previous valgrind output otherwise it will interfere
    my $test = $options->{test};

    (local $Valgrind_Log = "$test.valgrind-current") =~ s/^.*\///;

    if (0 && $ENV{PERL_VALGRIND} && -e $Valgrind_Log) { # SPEC CPU: No valgrind support
        unlink $Valgrind_Log
            or warn "$0: Failed to unlink '$Valgrind_Log': $!\n";
    }

    return;
}

sub _after_fork {
    my ($options) = @_;

    if ($options->{return_dir}) {
	my $return_dir = $options->{return_dir};
	chdir $return_dir
	   or die "Can't chdir from '$options->{run_dir}' to '$return_dir': $!";
    }

    return;
}

sub _run_test {
    my ($test, $type) = @_;

    my $options = _scan_test($test, $type);
    # $test might have changed if we're in ext/Foo, so don't use it anymore
    # from now on. Use $options->{test} instead.

    _before_fork($options);

    my $cmd = _cmd($options, $type);

    open(my $results, "$cmd |") or print "can't run '$cmd': $!.\n";

    _after_fork($options);

    # Our environment may force us to use UTF-8, but we can't be sure that
    # anything we're reading from will be generating (well formed) UTF-8
    # This may not be the best way - possibly we should unset ${^OPEN} up
    # top?
    binmode $results;

    return $results;
}

sub _quote_args {
    my ($args) = @_;
    my $argstring = '';

    foreach (split(/\s+/,$args)) {
       # In VMS protect with doublequotes because otherwise
       # DCL will lowercase -- unless already doublequoted.
       $_ = q(").$_.q(") if ($^O eq 'VMS') && !/^\"/ && length($_) > 0;
       $argstring = $argstring . ' ' . $_;
    }
    return $argstring;
}

sub _populate_hash {
    return unless defined $_[0];
    return map {$_, 1} split /\s+/, $_[0];
}

sub _tests_from_manifest {
    my ($extensions, $known_extensions) = @_;
    my %skip;
    my %extensions = _populate_hash($extensions);
    my %known_extensions = _populate_hash($known_extensions);

    foreach (keys %known_extensions) {
	$skip{$_} = 1 unless $extensions{$_};
    }

    my @results;
    my $mani = '../MANIFEST';
    if (open(MANI, $mani)) {
	while (<MANI>) {
	    if (m!^((?:cpan|dist|ext)/(\S+)/+(?:[^/\s]+\.t|test\.pl)|lib/\S+?(?:\.t|test\.pl))\s!) {
		my $t = $1;
		my $extension = $2;

		# XXX Generates way too many error lines currently.  Skip for
		# v5.22
		next if $t =~ /^cpan/ && ord("A") != 65;

		if (!$::core || $t =~ m!^lib/[a-z]!) {
		    if (defined $extension) {
			$extension =~ s!/t(:?/\S+)*$!!;
			# XXX Do I want to warn that I'm skipping these?
			next if $skip{$extension};
			my $flat_extension = $extension;
			$flat_extension =~ s!-!/!g;
			next if $skip{$flat_extension}; # Foo/Bar may live in Foo-Bar
		    }
		    my $path = "../$t";
		    push @results, $path;
		    $::path_to_name{$path} = $t;
		}
	    }
	}
	close MANI;
    } else {
	warn "$0: cannot open $mani: $!\n";
    }
    return @results;
}

unless (@ARGV) {
    # base first, as TEST bails out if that can't run
    # then comp, to validate that require works
    # then run, to validate that -M works
    # then we know we can -MTestInit for everything else, making life simpler
    foreach my $dir (qw(base comp run cmd io re opbasic op uni mro perf)) {
	_find_tests($dir);
    }
    unless ($::core) {
	_find_tests('porting');
	_find_tests("lib"); 
    }
    # Config.pm may be broken for make minitest. And this is only a refinement
    # for skipping tests on non-default builds, so it is allowed to fail.
    # What we want to to is make a list of extensions which we did not build.
    my $configsh = '../config.sh';
    my ($extensions, $known_extensions);
    if (-f $configsh) {
	open FH, $configsh or die "Can't open $configsh: $!";
	while (<FH>) {
	    if (/^extensions=['"](.*)['"]$/) {
		$extensions = $1;
	    }
	    elsif (/^known_extensions=['"](.*)['"]$/) {
		$known_extensions = $1;
	    }
	}
	if (!defined $known_extensions) {
	    warn "No known_extensions line found in $configsh";
	}
	if (!defined $extensions) {
	    warn "No extensions line found in $configsh";
	}
    }
    # The "complex" constructions of list return from a subroutine, and push of
    # a list, might fail if perl is really hosed, but they aren't needed for
    # make minitest, and the building of extensions will likely also fail if
    # something is that badly wrong.
    push @ARGV, _tests_from_manifest($extensions, $known_extensions);
    unless ($::core) {
	_find_tests('japh') if $::torture;
	_find_tests('benchmark') if $::benchmark or $ENV{PERL_BENCHMARK};
	_find_tests('bigmem') if $ENV{PERL_TEST_MEMORY};
    }
}

if ($::deparse) {
    _testprogs('deparse', '',   @ARGV);
}
elsif ($::with_utf16) {
    for my $e (0, 1) {
	for my $b (0, 1) {
	    print STDERR "# ENDIAN $e BOM $b\n";
	    my @UARGV;
	    for my $a (@ARGV) {
		my $u = $a . "." . ($e ? "l" : "b") . "e" . ($b ? "b" : "");
		my $f = $e ? "v" : "n";
		push @UARGV, $u;
		unlink($u);
		if (open(A, $a)) {
		    if (open(U, ">$u")) {
			print U pack("$f", 0xFEFF) if $b;
			while (<A>) {
			    print U pack("$f*", unpack("C*", $_));
			}
			close(U);
		    }
		    close(A);
		}
	    }
	    _testprogs('perl', '', @UARGV);
	    unlink(@UARGV);
	}
    }
}
else {
    _testprogs('perl',    '',   @ARGV);
}

sub _testprogs {
    my ($type, $args, @tests) = @_;

    print <<'EOT' if ($type eq 'deparse');
------------------------------------------------------------------------------
TESTING DEPARSER
------------------------------------------------------------------------------
EOT

    $::bad_files = 0;

    foreach my $t (@tests) {
      unless (exists $::path_to_name{$t}) {
	my $tname = "t/$t";
	$::path_to_name{$t} = $tname;
      }
    }
    my $maxlen = 0;
    foreach (@::path_to_name{@tests}) {
	s/\.\w+\z/ /; # space gives easy doubleclick to select fname
	my $len = length ;
	$maxlen = $len if $len > $maxlen;
    }
    # + 3 : we want three dots between the test name and the "ok"
    my $dotdotdot = $maxlen + 3 ;
    my $grind_ct = 0;		# count of non-empty valgrind reports
    my $total_files = @tests;
    my $good_files = 0;
    my $tested_files  = 0;
    my $totmax = 0;
    my %failed_tests;
    my $toolnm;		# valgrind, cachegrind, perf

    while (my $test = shift @tests) {
        my ($test_start_time, @starttimes) = 0;
	if ($show_elapsed_time) {
	    $test_start_time = Time::HiRes::time();
	    # times() reports usage by TEST, but we want usage of each
	    # testprog it calls, so record accumulated times now,
	    # subtract them out afterwards.  Ideally, we'd take times
	    # in BEGIN/END blocks (giving better visibility of self vs
	    # children of each testprog), but that would require some
	    # IPC to send results back here, or a completely different
	    # collection scheme (Storable isn't tuned for incremental use)
	    @starttimes = times;
	}
	if ($test =~ /^$/) {
	    next;
	}
	if ($type eq 'deparse' && $test =~ $deparse_skips) {
	    next;
	}
	my $te = $::path_to_name{$test} . '.'
		    x ($dotdotdot - length($::path_to_name{$test})) .' ';

	if ($^O ne 'VMS') {  # defer printing on VMS due to piping bug
	    print $te;
	    $te = '';
	}

	(local $Valgrind_Log = "$test.valgrind-current") =~ s/^.*\///;

	my $results = _run_test($test, $type);

	my $failure;
	my $next = 0;
	my $seen_leader = 0;
	my $seen_ok = 0;
	my $trailing_leader = 0;
	my $max;
	my %todo;
	my @test_comments = (); # For SPEC CPU diag
	my $show_comments = 0;  # For SPEC CPU diag
	while (<$results>) {
	    next if /^\s*$/; # skip blank lines
	    if (/^1..$/ && ($^O eq 'VMS')) {
		# VMS pipe bug inserts blank lines.
		my $l2 = <$results>;
		if ($l2 =~ /^\s*$/) {
		    $l2 = <$results>;
		}
		$_ = '1..' . $l2;
	    }
	    if ($::verbose) {
		print $_;
	    }
	    if (!/TODO/ && /^not ok\s+(\d*)/) { # For SPEC CPU 500.perlbench, log all non-ok output to stderr
		my $prevtest = $1 - 1;
		# Ignore comments if they're about an previous TODO/SKIP test
		if (grep { /Failed test $prevtest -/ } @test_comments) {
		    @test_comments = ();
		}
		print STDERR "\n".join('', (map { "$test|\t$_" } @test_comments))."$test\t$_";
		$show_comments = 1;
	    } elsif (!/^\#/) {
		$show_comments = 0;
	    }
	    unless (/^\#/) {
		@test_comments = (); # SPEC CPU -- erase old comments
		if ($trailing_leader) {
		    # shouldn't be anything following a postfix 1..n
		    $failure = 'FAILED--extra output after trailing 1..n';
		    last;
		}
		if (/^1\.\.([0-9]+)( todo ([\d ]+))?/) {
		    if ($seen_leader) {
			$failure = 'FAILED--seen duplicate leader';
			last;
		    }
		    $max = $1;
		    %todo = map { $_ => 1 } split / /, $3 if $3;
		    $totmax = $totmax + $max;
		    $tested_files = $tested_files + 1;
		    if ($seen_ok) {
			# 1..n appears at end of file
			$trailing_leader = 1;
			if ($next != $max) {
			    $failure = "FAILED--expected $max tests, saw $next";
			    last;
			}
		    }
		    else {
			$next = 0;
		    }
		    $seen_leader = 1;
		}
		else {
		    if (/^(not )?ok(?: (\d+))?[^\#]*(\s*\#.*)?/) {
			unless ($seen_leader) {
			    unless ($seen_ok) {
				$next = 0;
			    }
			}
			$seen_ok = 1;
			$next = $next + 1;
			my($not, $num, $extra, $istodo) = ($1, $2, $3, 0);
			$num = $next unless $num;

			if ($num == $next) {

			    # SKIP is essentially the same as TODO for t/TEST
			    # this still conforms to TAP:
			    # http://testanything.org/wiki/index.php/TAP_specification
			    $extra and $istodo = $extra =~ /#\s*(?:TODO|SKIP)\b/;
			    $istodo = 1 if $todo{$num};

			    if( $not && !$istodo ) {
				$failure = "FAILED at test $num";
				# SPEC CPU: Show all the failures: last;
			    }
			}
			else {
			    $failure ="FAILED--expected test $next, saw test $num";
			    last;
			}
		    }
		    elsif (/^Bail out!\s*(.*)/i) { # magic words
			die "FAILED--Further testing stopped" . ($1 ? ": $1\n" : ".\n");
		    }
		    else {
			# module tests are allowed extra output,
			# because Test::Harness allows it
			next if $test =~ /^\W*(cpan|dist|ext|lib)\b/;
			$failure = "FAILED--unexpected output at test $next";
			last;
		    }
		}
	    }
	    else { push @test_comments, $_; print STDERR "$test|\t$_" if $show_comments } # For SPEC CPU, so that notes can be shown for failed tests
	}
	my  @junk = <$results>;  # dump remaining output to prevent SIGPIPE
				 # (so far happens only on os390)
	close $results;
	undef @junk;

	if (not defined $failure) {
	    $failure = 'FAILED--no leader found' unless $seen_leader;
	}

	_check_valgrind(\$toolnm, \$grind_ct, \$test);

	if ($type eq 'deparse' && !$ENV{KEEP_DEPARSE_FILES}) {
	    unlink "./$test.dp";
	}
	if (not defined $failure and $next != $max) {
	    $failure="FAILED--expected $max tests, saw $next";
	}

	if( !defined $failure  # don't mask a test failure
	    and $? )
	{
	    $failure = "FAILED--non-zero wait status: $?";
	}

	# Deparse? Should it have passed or failed?
	if ($type eq 'deparse' && $test =~ $deparse_failures) {
	    if (!$failure) {
		# Wait, it didn't fail? Great news! Tell someone!
		$failure = "FAILED--all tests passed but test should have failed";
	    } else {
		# Bah, still failing. Mask it.
		print "${te}skipped\n";
		$tested_files = $tested_files - 1;
		next;
	    }
	}

	if (defined $failure) {
	    print "${te}$failure\n";
	    $::bad_files = $::bad_files + 1;
	    if ($test =~ /^base/ && ! defined &DynaLoader::boot_DynaLoader) {
		# Die if running under minitest (no DynaLoader).  Otherwise
		# keep going, as  we know that Perl basically works, or we
		# would not have been able to actually compile it all the way.
# SPEC CPU:		die "Failed a basic test ($test) under minitest -- cannot continue.\n";
	    }
	    $failed_tests{$test} = 1;
	}
	else {
	    if ($max) {
		my ($elapsed, $etms) = ("", 0);
		if ( $show_elapsed_time ) {
		    $etms = (Time::HiRes::time() - $test_start_time) * 1000;
		    $elapsed = sprintf(" %8.0f ms", $etms);

		    my (@endtimes) = times;
		    $endtimes[$_] -= $starttimes[$_] for 0..$#endtimes;
		    splice @endtimes, 0, 2;    # drop self/harness times
		    $_ *= 1000 for @endtimes;  # and scale to ms
		    $timings{$test} = [$etms,@endtimes];
		    $elapsed .= sprintf(" %5.0f ms", $_) for @endtimes;
		}
		print "${te}ok$elapsed\n";
		$good_files = $good_files + 1;
	    }
	    else {
		print "${te}ok\n"; # For SPEC CPU, a skip is as good as a pass
		$tested_files = $tested_files - 1;
	    }
	}
    } # while tests

    if ($::bad_files == 0) {
	if ($good_files) {
	    print "All tests successful.\n";
	    # XXX add mention of 'perlbug -ok' ?
	}
	else {
	    die "FAILED--no tests were run for some reason.\n";
	}
    }
    else {
	my $pct = $tested_files ? sprintf("%.2f", ($tested_files - $::bad_files) / $tested_files * 100) : "0.00";
	my $s = $::bad_files == 1 ? "" : "s";
	warn "Failed $::bad_files test$s out of $tested_files, $pct% okay.\n";
	for my $test ( sort keys %failed_tests ) {
	    print "\t$test\n";
	}
if (0) { # SPEC CPU
	warn <<'SHRDLU_1';
### Since not all tests were successful, you may want to run some of
### them individually and examine any diagnostic messages they produce.
### See the INSTALL document's section on "make test".
SHRDLU_1
	warn <<'SHRDLU_2' if $good_files / $total_files > 0.8 && 0; # SPEC CPU 500.perlbench doesn't have 'harness'
### You have a good chance to get more information by running
###   ./perl harness
### in the 't' directory since most (>=80%) of the tests succeeded.
SHRDLU_2
	if (eval {require Config; import Config; 1}) {
	    if ($::Config{usedl} && (my $p = $::Config{ldlibpthname})) {
		warn <<SHRDLU_3;
### You may have to set your dynamic library search path,
### $p, to point to the build directory:
SHRDLU_3
		if (exists $ENV{$p} && $ENV{$p} ne '') {
		    warn <<SHRDLU_4a;
###   setenv $p `pwd`:\$$p; cd t; ./perl harness
###   $p=`pwd`:\$$p; export $p; cd t; ./perl harness
###   export $p=`pwd`:\$$p; cd t; ./perl harness
SHRDLU_4a
		} else {
		    warn <<SHRDLU_4b;
###   setenv $p `pwd`; cd t; ./perl harness
###   $p=`pwd`; export $p; cd t; ./perl harness
###   export $p=`pwd`; cd t; ./perl harness
SHRDLU_4b
		}
		warn <<SHRDLU_5;
### for csh-style shells, like tcsh; or for traditional/modern
### Bourne-style shells, like bash, ksh, and zsh, respectively.
SHRDLU_5
	    }
	}
} else { # SPEC CPU
    my $path = $ENV{"PWD"};
    my $akey = (keys %failed_tests)[0];
    my $cmd = "$^X -I. -I./lib t/$akey";
    warn <<ETAOIN;
###
### Since some tests failed, you may want to run them individually and examine
### any messages they produce.  You could try something like the following:
###
###   cd $path
###   $cmd
###
ETAOIN
}
    }
    printf "Elapsed: %d sec\n", time() - $t0 if (0); # SPEC CPU: No timing
    my ($user,$sys,$cuser,$csys) = times;
    my $tot = sprintf("u=%.2f  s=%.2f  cu=%.2f  cs=%.2f  scripts=%d  tests=%d",
		      $user,$sys,$cuser,$csys,$tested_files,$totmax);
    print "$tot\n";
    if (0 && $good_files) { # SPEC CPU: No timing, no Storable
	if (-d $show_elapsed_time) {
	    # HARNESS_TIMER = <a-directory>.  Save timings etc to
	    # storable file there.  NB: the test cds to ./t/, so
	    # relative path must account for that, ie ../../perf
	    # points to dir next to source tree.
	    require Storable;
	    my @dt = localtime;
	    $dt[5] += 1900; $dt[4] += 1; # fix year, month
	    my $fn = "$show_elapsed_time/".join('-', @dt[5,4,3,2,1]).".ttimes";
	    Storable::store({ perf => \%timings,
			      gather_conf_platform_info(),
			      total => $tot,
			    }, $fn);
	    print "wrote storable file: $fn\n";
	}
    }

    _cleanup_valgrind(\$toolnm, \$grind_ct);
}
exit ($::bad_files != 0);

# Collect platform, config data that should allow comparing
# performance data between different machines.  With enough data,
# and/or clever statistical analysis, it should be possible to
# determine the effect of config choices, more memory, etc

sub gather_conf_platform_info {
    # currently rather quick & dirty, and subject to change
    # for both content and format.
    require Config;
    my (%conf, @platform) = ();
    $conf{$_} = $Config::Config{$_} for
	grep /cc|git|config_arg\d+/, keys %Config::Config;
    if (-f '/proc/cpuinfo') {
	open my $fh, '/proc/cpuinfo' or warn "$!: /proc/cpuinfo\n";
	@platform = grep /name|cpu/, <$fh>;
	chomp $_ for @platform;
    }
    unshift @platform, $^O;

    return (
	conf => \%conf,
	platform => {cpu => \@platform,
		     mem => [ grep s/\s+/ /,
			      grep chomp, `free` ],
		     load => [ grep chomp, `uptime` ],
	},
	host => (grep chomp, `hostname -f`),
	version => '0.03', # bump for conf, platform, or data collection changes
	);
}

sub _check_valgrind {
    return unless 0 && $ENV{PERL_VALGRIND}; # SPEC CPU: No valgrind

    my ($toolnm, $grind_ct, $test) = @_;

    $$toolnm = $ENV{VALGRIND};
    $$toolnm =~ s|.*/||;  # keep basename
    my @valgrind;	# gets content of file
    if (-e $Valgrind_Log) {
	if (open(V, $Valgrind_Log)) {
	    @valgrind = <V>;
	    close V;
	} else {
	    warn "$0: Failed to open '$Valgrind_Log': $!\n";
	}
    }
    if ($ENV{VG_OPTS} =~ /(cachegrind)/ or $$toolnm =~ /(perf)/) {
	$$toolnm = $1;
	if ($$toolnm eq 'perf') {
	    # append perfs subcommand, not just stat
	    my ($sub) = split /\s/, $ENV{VG_OPTS};
	    $$toolnm .= "-$sub";
	}
	if (rename $Valgrind_Log, "$$test.$$toolnm") {
	    $$grind_ct++;
	} else {
	    warn "$0: Failed to create '$$test.$$toolnm': $!\n";
	}
    }
    elsif (@valgrind) {
	my $leaks = 0;
	my $errors = 0;
	for my $i (0..$#valgrind) {
	    local $_ = $valgrind[$i];
	    if (/^==\d+== ERROR SUMMARY: (\d+) errors? /) {
		$errors = $errors + $1;   # there may be multiple error summaries
	    } elsif (/^==\d+== LEAK SUMMARY:/) {
		for my $off (1 .. 4) {
		    if ($valgrind[$i+$off] =~
			/(?:lost|reachable):\s+\d+ bytes in (\d+) blocks/) {
			    $leaks = $leaks + $1;
		    }
		}
	    }
	}
	if ($errors or $leaks) {
	    if (rename $Valgrind_Log, "$$test.valgrind") {
		$$grind_ct = $$grind_ct + 1;
	    } else {
		warn "$0: Failed to create '$$test.valgrind': $!\n";
	    }
	}
    } else {
        # Quiet wasn't asked for? Something may be amiss
	if ($ENV{VG_OPTS} && $ENV{VG_OPTS} !~ /(^|\s)(-q|--quiet)(\s|$)/) {
	    warn "No valgrind output?\n";
	}
    }
    if (-e $Valgrind_Log) {
	unlink $Valgrind_Log
	    or warn "$0: Failed to unlink '$Valgrind_Log': $!\n";
    }
}

sub _cleanup_valgrind {
    return unless 0 && $ENV{PERL_VALGRIND}; # SPEC CPU: No valgrind support

    my ($toolnm, $grind_ct) = @_;
    my $s = $$grind_ct == 1 ? '' : 's';
    print "$$grind_ct valgrind report$s created.\n", ;
    if ($$toolnm eq 'cachegrind') {
	# cachegrind leaves a lot of cachegrind.out.$pid litter
	# around the tree, find and delete them
	unlink _find_files('cachegrind.out.\d+$',
		     qw ( ../t ../cpan ../ext ../dist/ ));
    }
}

# Generate regexps of known bad filenames / skips from Porting/deparse-skips.txt
my $in;

sub _process_deparse_config {
    my @deparse_failures;
    my @deparse_skips;

    my $f = '../Porting/deparse-skips.txt';

    my $skips;
    if (!open($skips, '<', $f)) {
        warn "Failed to find $f: $!\n";
        return;
    }

    while(<$skips>) {
        if (/__DEPARSE_FAILURES__/) {
            $in = \@deparse_failures; next;
        } elsif (/__DEPARSE_SKIPS__/) {
            $in = \@deparse_skips; next;
        } elsif (!$in) {
            next;
	}

        s/#.*$//; # Kill comments
        s/\s+$//; # And trailing whitespace

        next unless $_;

        push @$in, $_;
    }

    for my $f (@deparse_failures, @deparse_skips) {
        if ($f =~ m|/$|) { # Dir? Skip everything below it
            $f = qr/\Q$f\E.*/;
        } else {
            $f = qr/\Q$f\E/;
        }
    }

    $deparse_failures = join('|', @deparse_failures);
    $deparse_failures = qr/^(?:$deparse_failures)$/;

    $deparse_skips = join('|', @deparse_skips);
    $deparse_skips = qr/^(?:$deparse_skips)$/;
}

# ex: set ts=8 sts=4 sw=4 noet:
